# gui_app.py
import customtkinter as ctk
import threading
import time
import math
import csv
import json
from scraper import get_page_data

# --- –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ---


class App(ctk.CTk):
    def __init__(self):
        super().__init__()

        # --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–∫–Ω–∞ ---
        self.title("Kufar Scraper ‚ö°")
        self.geometry("700x650")
        ctk.set_appearance_mode("dark")
        ctk.set_default_color_theme("blue")
        self.grid_columnconfigure(0, weight=1)

        # --- –í–∏–¥–∂–µ—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ ---
        # –°–µ–∫—Ü–∏—è –¥–ª—è –≤–≤–æ–¥–∞ —Å—Å—ã–ª–∫–∏
        self.url_frame = ctk.CTkFrame(self)
        self.url_frame.grid(row=0, column=0, padx=10, pady=10, sticky="ew")
        self.url_frame.grid_columnconfigure(0, weight=1)
        self.url_label = ctk.CTkLabel(
            self.url_frame, text="–í—Å—Ç–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É —Å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–º–∏ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏ —Å re.kufar.by:", font=("Arial", 14, "bold"))
        self.url_label.grid(row=0, column=0, padx=15, pady=(15, 5), sticky="w")
        self.url_entry = ctk.CTkEntry(
            self.url_frame, placeholder_text="https://re.kufar.by/l/minsk/snyat/kvartiru?price=r:100,500", height=35)
        self.url_entry.grid(row=1, column=0, padx=15,
                            pady=(5, 15), sticky="ew")

        ### –ù–û–í–´–ï –í–ò–î–ñ–ï–¢–´ –ù–ê–°–¢–†–û–ï–ö ###
        self.settings_frame = ctk.CTkFrame(self)
        self.settings_frame.grid(
            row=1, column=0, padx=10, pady=10, sticky="ew")
        self.settings_frame.grid_columnconfigure(0, weight=1)
        self.settings_frame.grid_columnconfigure(1, weight=1)

        self.ask_pages_switch = ctk.CTkSwitch(
            self.settings_frame, text="–°–ø—Ä–∞—à–∏–≤–∞—Ç—å –∫–æ–ª-–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü", font=("Arial", 12), onvalue=True, offvalue=False)
        self.ask_pages_switch.grid(
            row=0, column=0, padx=15, pady=15, sticky="w")
        self.ask_pages_switch.select()  # –í–∫–ª—é—á–∞–µ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

        self.delay_label = ctk.CTkLabel(
            self.settings_frame, text="–ó–∞–¥–µ—Ä–∂–∫–∞ (—Å–µ–∫):", font=("Arial", 12))
        self.delay_label.grid(row=0, column=1, padx=(
            100, 5), pady=15, sticky="w")
        self.delay_entry = ctk.CTkEntry(self.settings_frame, width=60)
        self.delay_entry.grid(row=0, column=1, padx=(
            200, 15), pady=15, sticky="w")
        self.delay_entry.insert(0, "1")

        # –ö–Ω–æ–ø–∫–∏ –∏ —Å—Ç–∞—Ç—É—Å
        self.format_segmented_button = ctk.CTkSegmentedButton(
            self, values=["CSV", "JSON"], height=35)
        self.format_segmented_button.set("CSV")
        self.format_segmented_button.grid(
            row=2, column=0, padx=20, pady=10, sticky="w")

        self.start_button = ctk.CTkButton(
            self, text="–ù–∞—á–∞—Ç—å –∞–Ω–∞–ª–∏–∑", command=self.start_initial_fetch, height=40, font=("Arial", 16, "bold"))
        self.start_button.grid(row=3, column=0, padx=10, pady=10, sticky="ew")

        self.progress_bar = ctk.CTkProgressBar(self, mode="indeterminate")
        self.status_textbox = ctk.CTkTextbox(
            self, state="disabled", font=("Courier New", 12))
        self.status_textbox.grid(
            row=4, column=0, padx=10, pady=10, sticky="nsew")
        # –ü–æ–∑–≤–æ–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–º—É –ø–æ–ª—é —Ä–∞—Å—à–∏—Ä—è—Ç—å—Å—è
        self.grid_rowconfigure(4, weight=1)

        # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –¥–∞–Ω–Ω—ã—Ö –º–µ–∂–¥—É –ø–æ—Ç–æ–∫–∞–º–∏
        self.first_page_data = None
        self.base_url = ""

    def log_status(self, message):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ –≤—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ –∏–∑ –ª—é–±–æ–≥–æ –ø–æ—Ç–æ–∫–∞."""
        def _log():
            self.status_textbox.configure(state="normal")
            self.status_textbox.insert("end", message + "\n")
            self.status_textbox.see("end")
            self.status_textbox.configure(state="disabled")
        self.after(0, _log)

    def set_ui_state(self, is_running):
        """–í–∫–ª—é—á–∞–µ—Ç/–≤—ã–∫–ª—é—á–∞–µ—Ç —ç–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞."""
        state = "disabled" if is_running else "normal"
        button_text = "–í –ø—Ä–æ—Ü–µ—Å—Å–µ..." if is_running else "–ù–∞—á–∞—Ç—å –∞–Ω–∞–ª–∏–∑"

        self.start_button.configure(state=state, text=button_text)
        self.url_entry.configure(state=state)
        self.ask_pages_switch.configure(state=state)
        self.delay_entry.configure(state=state)
        self.format_segmented_button.configure(state=state)

        if is_running:
            self.progress_bar.grid(
                row=5, column=0, padx=10, pady=10, sticky="ew")
            self.progress_bar.start()
        else:
            self.progress_bar.stop()
            self.progress_bar.grid_forget()

    ### –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê –í–ó–ê–ò–ú–û–î–ï–ô–°–¢–í–ò–Ø ###
    def start_initial_fetch(self):
        """–≠—Ç–∞–ø 1: –ó–∞–ø—É—Å–∫–∞–µ—Ç –∞–Ω–∞–ª–∏–∑ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã."""
        self.base_url = self.url_entry.get()
        if not self.base_url.startswith("https://re.kufar.by/"):
            self.log_status(
                "‚ùå –û–®–ò–ë–ö–ê: –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—Å—Ç–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É —Å re.kufar.by")
            return

        self.set_ui_state(is_running=True)
        self.log_status("üöÄ –ó–∞–ø—É—Å–∫... –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É...")

        thread = threading.Thread(target=self.initial_fetch_worker)
        thread.start()

    def initial_fetch_worker(self):
        """–†–∞–±–æ—á–∏–π –ø–æ—Ç–æ–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã."""
        self.first_page_data = get_page_data(self.base_url)

        if not self.first_page_data or self.first_page_data.get("error"):
            self.log_status(
                f"‚ùå –û–®–ò–ë–ö–ê: {self.first_page_data.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
            self.set_ui_state(is_running=False)
            return

        total_ads = self.first_page_data.get('total_ads', 0)
        ads_on_page = len(self.first_page_data.get('apartments', []))
        self.max_pages = math.ceil(
            total_ads / ads_on_page) if ads_on_page > 0 else 1

        self.log_status(
            f"üìä –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω. –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ {total_ads} –æ–±—ä—è–≤–ª–µ–Ω–∏–π (~{self.max_pages} —Å—Ç—Ä–∞–Ω–∏—Ü).")

        # –ü–µ—Ä–µ–¥–∞–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞—Ç–Ω–æ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Ç–æ–∫ –¥–ª—è –ø–æ–∫–∞–∑–∞ –¥–∏–∞–ª–æ–≥–∞
        self.after(0, self.prompt_for_page_count)

    def prompt_for_page_count(self):
        """–≠—Ç–∞–ø 2: –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–π –ø–∞—Ä—Å–∏–Ω–≥."""
        pages_to_scrape = self.max_pages

        if self.ask_pages_switch.get() is True:
            dialog = ctk.CTkInputDialog(
                text=f"–ù–∞–π–¥–µ–Ω–æ {self.max_pages} —Å—Ç—Ä–∞–Ω–∏—Ü.\n–°–∫–æ–ª—å–∫–æ —Å—Ç—Ä–∞–Ω–∏—Ü –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å?", title="–í—ã–±–æ—Ä –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å—Ç—Ä–∞–Ω–∏—Ü")
            user_input = dialog.get_input()

            if user_input is None:  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–∫—Ä—ã–ª –æ–∫–Ω–æ
                self.log_status("üõë –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
                self.set_ui_state(is_running=False)
                return

            try:
                pages_to_scrape = int(user_input)
                if not (1 <= pages_to_scrape <= self.max_pages):
                    pages_to_scrape = self.max_pages
                    self.log_status(
                        f"‚ö†Ô∏è –í–≤–µ–¥–µ–Ω–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ. –ë—É–¥—É—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –≤—Å–µ {self.max_pages} —Å—Ç—Ä–∞–Ω–∏—Ü.")
            except (ValueError, TypeError):
                pages_to_scrape = self.max_pages
                self.log_status(
                    f"‚ö†Ô∏è –í–≤–æ–¥ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω. –ë—É–¥—É—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –≤—Å–µ {self.max_pages} —Å—Ç—Ä–∞–Ω–∏—Ü.")

        self.log_status(f"‚öôÔ∏è –ü—Ä–∏–Ω—è—Ç–æ –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ: {pages_to_scrape} —Å—Ç—Ä–∞–Ω–∏—Ü.")

        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Ç–æ–∫ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
        main_thread = threading.Thread(
            target=self.main_scraping_worker, args=(pages_to_scrape,))
        main_thread.start()

    def main_scraping_worker(self, pages_to_scrape):
        """–≠—Ç–∞–ø 3: –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–æ–Ω–æ–≤–æ–º –ø–æ—Ç–æ–∫–µ."""
        all_found_apartments = self.first_page_data['apartments']
        next_token = self.first_page_data.get('next_page_token')
        current_url = self.base_url
        delay = float(self.delay_entry.get() or "1")

        self.log_status(
            f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(all_found_apartments)} –æ–±—ä—è–≤–ª–µ–Ω–∏–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ ‚Ññ1.")

        if pages_to_scrape > 1:
            for page_num in range(2, pages_to_scrape + 1):
                if not next_token:
                    self.log_status("üèÅ –ë–æ–ª—å—à–µ —Å—Ç—Ä–∞–Ω–∏—Ü –Ω–µ—Ç.")
                    break

                base_url_without_cursor = current_url.split('?')[0]
                current_url = f"{base_url_without_cursor}?cursor={next_token}"

                self.log_status(
                    f"--- üìÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Å—Ç—Ä–∞–Ω–∏—Ü—É ‚Ññ{page_num} –∏–∑ {pages_to_scrape} ---")
                time.sleep(delay)
                page_data = get_page_data(current_url)

                if not page_data or page_data.get("error"):
                    self.log_status(
                        f"‚ùå –û–®–ò–ë–ö–ê: {page_data.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
                    continue

                all_found_apartments.extend(page_data['apartments'])
                self.log_status(
                    f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(page_data['apartments'])} –æ–±—ä—è–≤–ª–µ–Ω–∏–π. –í—Å–µ–≥–æ —Å–æ–±—Ä–∞–Ω–æ: {len(all_found_apartments)}")
                next_token = page_data.get('next_page_token')

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        file_format = self.format_segmented_button.get().lower()
        filename = f"kufar_ads_{int(time.time())}"
        self.log_status(
            f"\nüéâ –°–±–æ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω! –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ {len(all_found_apartments)} –æ–±—ä—è–≤–ª–µ–Ω–∏–π.")
        self.save_results(all_found_apartments, file_format, filename)
        self.set_ui_state(is_running=False)

    def save_results(self, apartments, file_format, filename):
        if not apartments:
            return
        full_filename = f"{filename}.{file_format}"
        self.log_status(f"üíæ –°–æ—Ö—Ä–∞–Ω—è—é –¥–∞–Ω–Ω—ã–µ –≤ {full_filename}...")
        try:
            if file_format == "csv":
                first_item_keys = apartments[0].keys()
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ª–æ–∂–Ω—ã—Ö –ø–æ–ª–µ–π –¥–ª—è CSV
                processed_apartments = []
                for ad in apartments:
                    processed_ad = {}
                    for key in first_item_keys:
                        value = ad.get(key)
                        if isinstance(value, (dict, list)):
                            processed_ad[key] = json.dumps(
                                value, ensure_ascii=False)
                        else:
                            processed_ad[key] = value
                    processed_apartments.append(processed_ad)

                with open(full_filename, 'w', newline='', encoding='utf-8') as f:
                    writer = csv.DictWriter(f, fieldnames=first_item_keys)
                    writer.writeheader()
                    writer.writerows(processed_apartments)
            elif file_format == "json":
                with open(full_filename, 'w', encoding='utf-8') as f:
                    json.dump(apartments, f, ensure_ascii=False, indent=4)
            self.log_status(f"‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!")
        except Exception as e:
            self.log_status(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")


# --- –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ---
if __name__ == "__main__":
    app = App()
    app.mainloop()
